#!/usr/bin/perl

##################################################################################
##										##
##      AUTHOR:         Scott Bertagnole                                        ##
##      CREATED:        6 Feb 2012                                              ##
##      THIS VERSION:   2.0.0 | 14 Feb 2012                                     ##
##										##
##      This script is used by the Cataloging Dept. to automate the process     ##
##      of looking up a book/item's spine label in Symphony. It replaces an     ##
##      older script created for the same purpose                               ##
##                                                                              ##
##      EXAMPLE USAGE: cat barcodes.list | ./spinelabels.pl                     ##
##                                                                              ##
##      INPUT: This script looks for a pipe-delimited list of barcodes          ##
##      (ItemIDs).  This list may either be multiline (cat a file in) or        ##
##      singleline (echo a list of barcodes).                                   ##
##                                                                              ##
##      OUTPUT: This script returns a partial path (relative from the current   ##
##      working directory) and filename to a .docx file that contains the       ##
##      items' spine labels.  The docx, per request of the catalogers, is in a  ##
##      Word Document format and is preformatted to use the following settings: ##
##              Font:   Tahoma 9pt (bold)                                       ##
##              Page:   1.8"x1.2" (0.1" margins)                                ##
##                                                                              ##
##      DEPENDENCIES: This script relies heavily on the libraries listed        ##
##      below in the first section.  In addition, it requires that the          ##
##      following directories exist:                                            ##
##              ./logs                                                          ##
##              ./docx_instances                                                ##
##              ./docx_template (Must contain the extracted files from a Docx   ##
##                              to be used as a template for the others         ##
##      Be aware that these directories must exist in relation to the current   ##
##      working directory (ie: the directory from which you are calling this    ##
##      script, not the directory that this script resides in).                 ##
##                                                                              ##
##################################################################################

#Import libraries for use in this script
use strict;
use Sirsi::API;
use Sirsi::Labels;
use Sirsi::Docx;
use Sirsi::Text;

#Set up the Symphony environment
Sirsi::API::env();

if (-t STDIN)	 #If no input was passed into this script, then display an error message
{
        print (STDERR "While trying to retrieve spine labels, no barcodes were provided to input (STDIN was empty).");
}
else		#If input was passed into this script, proceed with computation
{
	#Since this script could take both multiline (cat a file as input) or single-line (echo a string as input) input, standardize all input as a single string.
	my $barcodes_raw;
	while(<STDIN>)
	{
		$barcodes_raw .= $_;
	}

	#Convert the standardized input into an array and send it to the Spinelabels API library, which will return the identifier for this instance of the spinelabels.
	my @barcodes = split(/\|/, $barcodes_raw);
	my $fileID = Sirsi::API::spinelabels(@barcodes);

	my $docx = new Docx();

        #Read the raw spinelabels file generated by the API library and feed it line by line to clean it up.
	my @spinelabels = Sirsi::API::readArrayFromFile("logs/labels.$fileID.raw");
	my $i=0;
	while($i < scalar @spinelabels)
	{
		$spinelabels[$i] = Sirsi::Text::trim($spinelabels[$i]);
		if ($i % 10 == 0)
		{
			#Since the raw spinelabels come back with a location code, we convert the code into a human-readable format used by the shelvers or blank it out entirely.
			$spinelabels[$i] = Sirsi::Labels::getLocationFromCode($spinelabels[$i]);
		}

		#Preps the current line for use in a Docx format.
		#The <w:t> tags will make the text bold

		$docx->addText($spinelabels[$i]);
		$i++;
	}

	#Createst the Docx file from the template and writes in the content that we just finished prepping.
	my $spineLabelString = join("\n", @spinelabels);
	my $docName = "docx_instances/labels_$fileID";
	$docx->setPageSize(1728,2592);
	$docx->setPageMargins(144,144,144,144);
	$docx->write($docName);
	print "$docName.docx";

	#Cleanup
	my $cmd = "rm logs/labels.$fileID.raw logs/barcodes.$fileID.list logs/selitem.$fileID.log logs/spinepock.$fileID.log";
	system($cmd);
}
